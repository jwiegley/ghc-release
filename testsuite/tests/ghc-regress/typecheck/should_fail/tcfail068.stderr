
tcfail068.hs:14:9:
    Could not deduce (s1 ~ s) from the context (Constructed a)
      `s1' is a rigid type variable bound by
           the polymorphic type `forall s. GHC.ST.ST s a' at tcfail068.hs:13:9
      `s' is a rigid type variable bound by
          the type signature for `itgen' at tcfail068.hs:11:53
    In the first argument of `runST', namely
      `(newSTArray ((1, 1), n) x)'
    In the expression: runST (newSTArray ((1, 1), n) x)
    In an equation for `itgen':
        itgen n x = runST (newSTArray ((1, 1), n) x)

tcfail068.hs:19:21:
    Could not deduce (s ~ s1) from the context (Constructed a)
      `s' is a rigid type variable bound by
          the type signature for `itiap' at tcfail068.hs:16:58
      `s1' is a rigid type variable bound by
           the polymorphic type `forall s. GHC.ST.ST s a' at tcfail068.hs:18:9
    In the first argument of `readSTArray', namely `arr'
    In the first argument of `(>>=)', namely `readSTArray arr i'
    In the first argument of `runST', namely
      `(readSTArray arr i
      >>=
        \ val -> writeSTArray arr i (f val) >> return arr)'

tcfail068.hs:24:35:
    Could not deduce (s ~ s1) from the context (Constructed a)
      `s' is a rigid type variable bound by
          the type signature for `itrap' at tcfail068.hs:23:70
      `s1' is a rigid type variable bound by
           the polymorphic type `forall s. GHC.ST.ST s a'
             at tcfail068.hs:24:29
    In the first argument of `runST', namely `(itrap' i k)'
    In the expression: runST (itrap' i k)
    In an equation for `itrap':
        itrap ((i, k), (j, l)) f arr
          = runST (itrap' i k)
          where
              itrap' i k
                = if k > l then return arr else (itrapsnd i k >> itrap' i (k + 1))
              itrapsnd i k
                = if i > j then
                      return arr
                  else
                      (readSTArray arr (i, k) >>= \ val -> ...)

tcfail068.hs:36:46:
    Could not deduce (s ~ s1) from the context (Constructed b)
      `s' is a rigid type variable bound by
          the type signature for `itrapstate' at tcfail068.hs:35:40
      `s1' is a rigid type variable bound by
           the polymorphic type `forall s. GHC.ST.ST s a'
             at tcfail068.hs:36:40
    In the first argument of `runST', namely `(itrapstate' i k s)'
    In the expression: runST (itrapstate' i k s)
    In an equation for `itrapstate':
        itrapstate ((i, k), (j, l)) f c d s arr
          = runST (itrapstate' i k s)
          where
              itrapstate' i k s
                = if k > l then
                      return (s, arr)
                  else
                      (itrapstatesnd i k s >>= \ (s, arr) -> ...)
              itrapstatesnd i k s
                = if i > j then
                      return (s, arr)
                  else
                      (readSTArray arr (i, k) >>= \ val -> ...)
