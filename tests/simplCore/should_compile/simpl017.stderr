
simpl017.hs:44:12:
    Couldn't match expected type `forall v. [E m i] -> E' v m a'
                with actual type `[E m i] -> E' v0 m a'
    In the first argument of `return', namely `f'
    In a stmt of a 'do' block: return f
    In the first argument of `E', namely
      `(do { let ix :: [E m i] -> m i
                 ix [i] = runE i
                 {-# INLINE f #-}
                 ....;
             return f })'

simpl017.hs:63:5:
    Couldn't match expected type `[E (ST t0) Int] -> E (ST s) Int'
                with actual type `forall v. [E (ST s) Int] -> E' v (ST s) Int'
    The function `a' is applied to one argument,
    but its type `forall v. [E (ST s) Int] -> E' v (ST s) Int' has none
    In the first argument of `plus', namely `a [one]'
    In a stmt of a 'do' block: a [one] `plus` a [one]

simpl017.hs:63:19:
    Couldn't match expected type `[E (ST t1) Int] -> E (ST s) Int'
                with actual type `forall v. [E (ST s) Int] -> E' v (ST s) Int'
    The function `a' is applied to one argument,
    but its type `forall v. [E (ST s) Int] -> E' v (ST s) Int' has none
    In the second argument of `plus', namely `a [one]'
    In a stmt of a 'do' block: a [one] `plus` a [one]
